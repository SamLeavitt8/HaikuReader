/* eslint-disable  func-names */
/* eslint-disable  no-console */

const Alexa = require('ask-sdk-core');

const GetNewFactHandler = {
  canHandle(handlerInput) {
    const request = handlerInput.requestEnvelope.request;
    return request.type === 'LaunchRequest'
      || (request.type === 'IntentRequest');
  },
  handle(handlerInput) {
    const factArr = data;
    const factIndex = Math.floor(Math.random() * factArr.length);
    const randomFact = factArr[factIndex];
    const speechOutput = GET_FACT_MESSAGE + randomFact;

    return handlerInput.responseBuilder
      .speak(speechOutput)
      .withSimpleCard(SKILL_NAME, randomFact)
      .getResponse();
  },
};

const HelpHandler = {
  canHandle(handlerInput) {
    const request = handlerInput.requestEnvelope.request;
    return request.type === 'IntentRequest'
      && request.intent.name === 'AMAZON.HelpIntent';
  },
  handle(handlerInput) {
    return handlerInput.responseBuilder
      .speak(HELP_MESSAGE)
      .reprompt(HELP_REPROMPT)
      .getResponse();
  },
};

const ExitHandler = {
  canHandle(handlerInput) {
    const request = handlerInput.requestEnvelope.request;
    return request.type === 'IntentRequest'
      && (request.intent.name === 'AMAZON.CancelIntent'
        || request.intent.name === 'AMAZON.StopIntent');
  },
  handle(handlerInput) {
    return handlerInput.responseBuilder
      .speak(STOP_MESSAGE)
      .getResponse();
  },
};

const SessionEndedRequestHandler = {
  canHandle(handlerInput) {
    const request = handlerInput.requestEnvelope.request;
    return request.type === 'SessionEndedRequest';
  },
  handle(handlerInput) {
    console.log(`Session ended with reason: ${handlerInput.requestEnvelope.request.reason}`);

    return handlerInput.responseBuilder.getResponse();
  },
};

const ErrorHandler = {
  canHandle() {
    return true;
  },
  handle(handlerInput, error) {
    console.log(`Error handled: ${error.message}`);

    return handlerInput.responseBuilder
      .speak('Sorry, an error occurred.')
      .reprompt('Sorry, an error occurred.')
      .getResponse();
  },
};

const SKILL_NAME = 'Haiku Reader';
const GET_FACT_MESSAGE = 'I have a haiku for you: ';
const HELP_MESSAGE = 'You can say tell me a haiku...  or, you can say stop... What can I help you with?';
const HELP_REPROMPT = 'You can ask me to tell a haiku or exit to stop. What can I help you with?';
const STOP_MESSAGE = 'Goodbye!';

const data = [
  `Soft light gently glows.
  Dew clings to the quiet leaves.
  A hush before dawn`,

  `Waves crash on the shore.
  Whispers of the deep arise.
  Seagulls call the sky`,

  `Neon lights flicker.
  Cars hum down the empty streets.
  Moonlight on pavement`,

  `Snowflakes drift and dance.
  Hushed footprints mark frozen ground.
  World wrapped up in white`,

  `Sunbeam on the floor.
  Curled within its golden warmth.
  Dreams drift through soft fur`,

  `Stone steps worn with time.
  Mist weaves through the ancient pines.
  Summit waits above`,

  `Cherry blossoms bloom.
  Petals float on gentle winds.
  Earth begins to stir`,

  `Thunder rolls afar.
  Lightning cracks the heavy sky.
  Rain begins to fall`,

  `Steam swirls from my cup.
  Warmth seeps through porcelain walls.
  Calm in every sip`,

  `Tiny lanterns glow.
  Flickering in moonlit fields.
  Night hums with their dance`,

  `Footsteps mark the road.
  Clouds drift slow against the sky.
  The journey goes on`,

  `Pages gather dust.
  Whispers trapped in ink and time.
  Waiting to be read`,

  `Golden leaves descend.
  Dancing in the autumn breeze.
  Time drifts like the wind.`
];

const skillBuilder = Alexa.SkillBuilders.custom();

exports.handler = skillBuilder
  .addRequestHandlers(
    GetNewFactHandler,
    HelpHandler,
    ExitHandler,
    SessionEndedRequestHandler
  )
  .addErrorHandlers(ErrorHandler)
  .lambda();
